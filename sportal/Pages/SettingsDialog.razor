@using System.IO

@using sportal.Data
@using sportal.Services

@inject IJSRuntime JSRuntime
@inject JWTService JWTServiceInstance
@inject UserService UserServiceInstance
@inject IMatToaster Toaster

<MatDialog Id="settingsDialog" @bind-IsOpen="@DialogIsOpen">
    <MatDialogTitle>QCS Tenant Settings</MatDialogTitle>
    <MatDialogContent>
        <p>
            <MatTextField @bind-Value="@hostname" Label="Hostname" PlaceHolder="name.region.qlikcloud.com" FullWidth="true"></MatTextField>
        </p>
        <p>
            <MatTextField @bind-Value="@webIntegrationID" Label="Web Integration ID" PlaceHolder="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" FullWidth="true"></MatTextField>
        </p>
        <br />
        <p>
            <MatTextField Id="publicKey" @bind-Value="@PUBLIC_KEY" Label="JWT Certificate" ReadOnly="true" FullWidth="true"></MatTextField>
            <MatButton Dense="true" OnClick="@CopyToClipboard">Copy to Clipboard</MatButton>

        </p>
        <p>
            <MatStringField @bind-Value="@jwtIssuer" Label="JWT Issuer" PlaceHolder="name.region.qlikcloud.com" FullWidth="true"></MatStringField>
        </p>
        <p>
            <MatStringField @bind-Value="@jwtKeyID" Label="JWT Key ID" PlaceHolder="xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx" FullWidth="true"></MatStringField>
        </p>


    </MatDialogContent>
    <MatDialogActions>
        @if (GlobalSettings.ENABLE_CERTIFICATE_EXPORT)
        {
            <MatButton Id="exportCertificateButton" @onclick="DownloadCertificate">Export Certificate</MatButton>
        }
        <MatButton Id="refreshUsersButton" OnClick="@RefreshUsers">Refresh Users</MatButton>


        <MatButton OnClick="@(e => { dialogIsOpen = false; })">Cancel</MatButton>
        <MatButton OnClick="@SaveClick">Save</MatButton>
    </MatDialogActions>
</MatDialog>

<MatIconButton Id="settingsButton" Icon="settings" OnClick="@OpenDialog" Raised="true"></MatIconButton>

@code
        {
    TenantData tenantData;
    string hostname;
    string webIntegrationID;
    string jwtIssuer;
    string jwtKeyID;

    string PUBLIC_KEY;
    private bool dialogIsOpen;
    bool DialogIsOpen
    {
        get { return dialogIsOpen; }
        set
        {
            if (value == false)
            {
                hostname = tenantData.Hostname;
                webIntegrationID = tenantData.WebIntegrationID;
                jwtIssuer = tenantData.Issuer;
                jwtKeyID = tenantData.KeyID;
            }
            dialogIsOpen = value;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        tenantData = await JWTServiceInstance.GetTenantDataAsync();
        PUBLIC_KEY = await JWTServiceInstance.GetPublicKey();
        PUBLIC_KEY = "-----BEGIN CERTIFICATE-----" + PUBLIC_KEY + "-----END CERTIFICATE-----";

        hostname = tenantData.Hostname;
        webIntegrationID = tenantData.WebIntegrationID;
        jwtIssuer = tenantData.Issuer;
        jwtKeyID = tenantData.KeyID;
    }

    private void OpenDialog()
    {
        dialogIsOpen = true;
    }

    private void SaveClick()
    {
        tenantData.Hostname = hostname;
        tenantData.WebIntegrationID = webIntegrationID;
        tenantData.Issuer = jwtIssuer;
        tenantData.KeyID = jwtKeyID;
        dialogIsOpen = false;
        JWTServiceInstance.SaveUpdatedTenantData(hostname, webIntegrationID, jwtIssuer, jwtKeyID);
    }

    private async void RefreshUsers()
    {
        UserServiceInstance.RefreshUsers();

        await JSRuntime.InvokeAsync<string>("blazorExtensions.Refresh");
    }

    private async Task DownloadCertificate()
    {
        var fileStream = JWTServiceInstance.GetCertificateFilestream();
        var fileName = "certificate.pfx";

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JSRuntime.InvokeVoidAsync("blazorExtensions.DownloadFileFromStream", fileName, streamRef);
    }

    private async Task CopyToClipboard()
    {
        bool didCopy = await JSRuntime.InvokeAsync<bool>("blazorExtensions.CopyToClipboard");
        if (!didCopy)
        {
            Toaster.Add("'Copy to Clipboard' failed. This is unsupported in Safari. Use another browser or manually copy the text.", MatToastType.Danger);
        }
    }
}


