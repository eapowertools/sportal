@using sportal.Data
@using sportal.Services
@using System.Net.Http
@using System.Net.Http.Headers
@inject IJSRuntime JSRuntime;
@inject UserService UserServiceInstance
@inject JWTService JWTServiceInstance


<div class="mat-layout-grid">
    <div class="mat-layout-grid-inner">

        @foreach (User u in _users)
        {

<MatCard class="qlik-green mat-layout-grid-cell mat-layout-grid-cell-span-3-desktop mat-layout-grid-cell-span-4-tablet mat-layout-grid-cell-span-4-phone">
    <MatCardContent id="cardBodyContent">
        <div class="demo-mat-card-content">
            <MatHeadline6 class="demo-mat-card-clean-margin">@u.DisplayName</MatHeadline6>
            <MatSubtitle2 class="demo-mat-card-clean-margin">@u.Title</MatSubtitle2>
            <img src="data:image/png;base64, @u.Image" alt="" class="circle responsive-img-custom valign">
            <div>
                <MatBody2 class="demo-mat-card-content demo-mat-card-clean-margin">@u.Biography</MatBody2>
                <br>


                <MatChipSet Filter="true" @bind-SelectedChips="selectedChips">

                    @foreach (string group in u.Groups)
                    {
<MatChip Label="@group"></MatChip>}
                </MatChipSet>
            </div>
            @*<a class="btn-floating halfway-fab waves-effect waves-light qlik-tanzanite" target="_blank" @onclick="@(e => LoginButton(e, u))">
                    <i class="material-icons">arrow_right_alt</i>
                </a>*@
        </div>
    </MatCardContent>
    <MatCardActions>

        <MatCardActionIcons>
            <MatIconButton Icon="@MatIconNames.Arrow_forward" OnClick="@(e => LoginButton(e, u))"></MatIconButton>
        </MatCardActionIcons>
    </MatCardActions>
</MatCard>  }
    </div>
</div>

@code { private User[] _users;
    private HttpClient _httpClient;
    MatChip[] selectedChips = null;

    protected override async Task OnInitializedAsync()
    {
        _users = await UserServiceInstance.GetUserListAsync();
        _httpClient = new HttpClient();
    }

    private async Task LoginButton(MouseEventArgs e, User u)
    {
        // get JWT token
        LoginObject lo = await JWTServiceInstance.GetLoginObjectAsync(u);

        // make call to login
        await JSRuntime.InvokeAsync<string>("blazorExtensions.JWTLogin", lo.Hostname, lo.WebIntegrationID, lo.JWTToken);
    }}


